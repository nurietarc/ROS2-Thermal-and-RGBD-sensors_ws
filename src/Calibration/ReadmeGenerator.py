import os
from colorama import Fore, Style

"""
    Nuria Rodríguez Calderón

    A class responsible for generating README files for various outputs of the calibration process.
    This class creates detailed documentation for calibration data and plots generated during the 
    camera calibration process.
"""

class CalibrationReadme:
    def __init__(self, output_path, folder):
        """
        Initializes the CalibrationReadme class with the output path and folder name.

        Parameters:
        - output_path (str): The directory where the README files will be saved.
        - folder (str): The specific folder name used to distinguish between different calibration setups.
        """
        self.output_path = output_path
        self.folder = folder

    def create_calibration_readme(self):
        """
        Creates a README file documenting the calibration data and parameters.
        This README file explains the intrinsic and extrinsic calibration files generated.
        """
        readme_content = f"""
        # Calibration Data for Folder: {self.folder}

        This directory contains the calibration data for images in the '{self.folder}' folder.
        The files generated during calibration include intrinsic and extrinsic parameters, which 
        are essential for understanding the camera's geometry and its relationship to the observed scene.

        ## Files Generated

        - `{self.folder.lower()}_calibration.json`: Contains the intrinsic parameters of the camera, including:
          - **mtx**: Camera matrix, representing focal length and principal point.
          - **dist**: Distortion coefficients, representing lens distortion.

        - `{self.folder}_extrinsic.json`: Contains the extrinsic parameters of the camera for each image, including:
          - **rvecs**: Rotation vectors, representing the orientation of the camera.
          - **tvecs**: Translation vectors, representing the position of the camera in the scene.

        ## Notes

        - These parameters are critical for tasks involving 3D reconstruction, object tracking, and stereo vision.
        - The distortion coefficients are especially important if the camera lens introduces noticeable distortion.
        """

        # Save README file
        readme_file_path = os.path.join(self.output_path, "README_calibration_data.md")
        with open(readme_file_path, "w") as readme_file:
            readme_file.write(readme_content)

    def create_plots_readme(self):
        """
        Creates a README file documenting the calibration plots generated by save_calibration_plots.
        This README file explains the purpose of each type of plot generated.
        """
        readme_content = f"""
        # Calibration Plots for Folder: {self.folder}

        This directory contains a set of visualization plots generated as part of the camera calibration process 
        for images in the '{self.folder}' folder. Each plot serves to illustrate different stages and results of the 
        calibration process.

        ## Files Generated

        - `calibration_transformations_<index>.png`: Step-by-step transformation of selected sample images, 
          showing the following stages:
            - **Original Image**: The original input image used for calibration.
            - **Grayscale Image**: The original image converted to grayscale.
            - **Equalized Image**: Histogram equalization applied to the grayscale image to enhance contrast.
            - **Inverted Image**: The equalized grayscale image with colors inverted.

        - `calibration_original_mosaic.png`: A mosaic of all original images used in the calibration process, 
          arranged in 5 columns and as many rows as necessary. This plot provides an overview of the raw input images.

        - `calibration_gray_mosaic.png`: A mosaic of all images in grayscale after transformations, arranged in 
          5 columns and as many rows as necessary. This allows for a quick visual check of the grayscale transformation 
          applied to each calibration image.

        - `calibration_corners_mosaic.png`: A mosaic of original images with detected chessboard corners overlaid, 
          arranged in 5 columns and as many rows as necessary. This plot shows which images had corners detected 
          successfully, indicated by the drawn corners on the chessboard.

        ## Notes

        - Only a subset of images is used for the step-by-step transformation plots to reduce processing and storage.
        - All mosaics are organized in 5 columns for consistency, with the number of rows adjusted dynamically 
          based on the number of images.

        This README serves as a guide for interpreting the generated plots, which help verify the effectiveness of 
        the calibration process for the `{self.folder}` dataset.
        """

        # Save README file
        readme_file_path = os.path.join(self.output_path, "README_calibration_plots.md")
        with open(readme_file_path, "w") as readme_file:
            readme_file.write(readme_content)

    def create_corners_readme(self):
        """
        Creates a README file documenting the detected chessboard corners for each calibration image.
        """
        readme_content = f"""
        # Corner Detection Data for {self.folder}

        This folder contains detected chessboard corners for each calibration image.

        ## Files Generated

        - `corners.json`: A JSON file containing lists of detected corners for each image. Each entry includes:
            - `filename`: The image file name.
            - `corners`: Detected corner coordinates in the image.

        ## Notes

        - Detected corners are essential for calculating homography and other transformations.
        - Each image's corners are processed and stored for further calibration purposes.
        """
        
        readme_file_path = os.path.join(self.output_path, "README_corners_data.md")
        with open(readme_file_path, "w") as readme_file:
            readme_file.write(readme_content)

class HomographyReadme:
    def __init__(self, output_path):
        """
        Initializes the HomographyReadme class with the output path.

        Parameters:
        - output_path (str): The directory where the README files will be saved.
        """
        self.output_path = output_path
        
    def create_homography_readme(self):
        """
        Creates a README file documenting the homography data generated for aligning two camera views.
        """
        readme_content = f"""
        # Homography Data

        This directory contains homography matrices calculated between two camera views.

        ## Files Generated

        - `average_homography.txt`: Contains the average homography matrix calculated from multiple image pairs,
          used to map coordinates between two different camera perspectives.

        ## Notes

        - The homography matrix allows for alignment between different viewpoints, crucial for multi-camera setups.
        - Use this matrix for perspective transformations, e.g., aligning images between RGB and thermal views.
        """
        
        readme_file_path = os.path.join(self.output_path, "README_homography_data.md")
        with open(readme_file_path, "w") as readme_file:
            readme_file.write(readme_content)

    def create_homographyplot_readme(self, folder1, folder2):
        """
        Generate a README file describing the homography calibration results.

        Parameters:
        - folder1 (str): Name of the first folder used in homography calibration.
        - folder2 (str): Name of the second folder used in homography calibration.
        """
        content = f"""
        # Homography Calibration README
         The following sections explain the process, generated files, and how to interpret the results.

        ## Homography Process Description

        Homography calibration was conducted to align images from two cameras (or two perspectives) by generating a transformation matrix that maps points from **{folder1}** to **{folder2}**. This homography matrix enables the transformation of an image from the first perspective to match the scale and position of the second.

        ## Generated Files

        2. **homography_effect_*.jpg**: A series of images showing the effect of homography on images from **{folder1}** when transformed to align with images from **{folder2}**. Each set of images includes:
          - **Original Image**: The image in the original perspective of **{folder1}**.
          - **Transformed Image**: The **{folder1}** image after applying the homography matrix.
          - **Reference Image**: The corresponding image from **{folder2}** used for comparison.

        ## Interpreting the Results

        - **Homography Matrix**: The matrix in `average_homography.txt` is useful for applications requiring coordinate transformation from one reference frame to another. For example, it can be employed to overlay information from one camera onto the perspective of another.
        - **Transformed Images**: The images in `homography_effect_*.jpg` allow visual verification of the transformation's accuracy. The transformed image should align as closely as possible with the reference image. Any visual misalignment indicates areas where homography might lack full precision.

        ## Limitations and Notes

        - The quality of homography depends on the number of detected corner points and detection accuracy in both images.
        - Homography assumes a planar scene between the two views. Any depth or perspective variation can introduce alignment errors.

        ---

        *This README was generated automatically as part of the homography calibration process.*
        """
        readme_path = os.path.join(self.output_path, "README_Homography.md")
        with open(readme_path, "w") as readme_file:
            readme_file.write(content)
